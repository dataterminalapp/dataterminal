import {
  app,
  BrowserWindow,
  ipcMain,
  nativeTheme,
  Menu,
  MenuItem,
  session,
} from "electron";
import { updateElectronApp, UpdateSourceType } from "update-electron-app";

import {
  cancelQuery,
  parseConnectionString,
  latencyDatabase,
  query,
  setConnectionString,
  testConnectionString,
  removePanelClient,
  closeClient,
} from "./services/database";
import {
  login,
  openGoProBrowser,
  getSimplifiedSafeAuth,
  remove as removeAuthData,
  refreshStoredAuth as updateAuthData,
} from "./services/auth";
import {
  saveAppConfig,
  getAppConfig,
  getStore,
  getStoreConfigField,
} from "./services/config";
import log from "electron-log/main";

import {
  default as installExtension,
  REDUX_DEVTOOLS,
  REACT_DEVELOPER_TOOLS,
} from "electron-devtools-installer";
import { APIError } from "./services/error";
import * as Sentry from "@sentry/electron/main";
import { chat, generateCode } from "./services/ai/ai";
import dotenv from "dotenv";
dotenv.config();

const isDev = !app.isPackaged;

if (!isDev) {
  Sentry.init({
    dsn: process.env.SENTRY_DSN,
    transportOptions: {
      /* The maximum number of days to keep an envelope in the queue. */
      maxAgeDays: 30,
      /* The maximum number of envelopes to keep in the queue. */
      maxQueueSize: 30,
      flushAtStartup: false,
    },
    environment: "production",
  });
}

/**
 * They are the same as the ones availables in `forge.config.ts`
 */
export const BINARIES_BUCKET =
  "https://dataterminal-binaries.s3.us-east-2.amazonaws.com";
export const BINARIES_UPDATE_MANIFEST_URL = `${BINARIES_BUCKET}/data-terminal/${process.platform}/${process.arch}`;

updateElectronApp({
  updateSource: {
    type: UpdateSourceType.StaticStorage,
    baseUrl: BINARIES_UPDATE_MANIFEST_URL,
  },
});

// Uncomment to test LSP :)
// import { runLanguageServer } from './local/languageServerRunner';
//
// runLanguageServer({
//   serverName: "pglsp",
//   pathName: "/pglsp",
//   runCommand: "pglsp",
//   runCommandArgs: [],
//   serverPort: 8999,
//   wsServerOptions: {
//     noServer: true,
//     perMessageDeflate: false,
//   }
// });

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
// eslint-disable-next-line @typescript-eslint/no-require-imports
if (require("electron-squirrel-startup")) {
  app.quit();
}

app.setAsDefaultProtocolClient("data-terminal");
const gotTheLock = app.requestSingleInstanceLock();

if (!gotTheLock) {
  app.quit();
} else {
  app.on("second-instance", () => {
    // Someone tried to run a second instance, we should focus our window.
    if (mainWindow) {
      if (mainWindow.isMinimized()) mainWindow.restore();
      mainWindow.focus();
    }
  });

  let mainWindow: BrowserWindow;

  const createWindow = (): void => {
    // Create the browser window.
    mainWindow = new BrowserWindow({
      height: 768,
      width: 1024,
      webPreferences: {
        preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
        devTools: isDev,
      },
      titleBarStyle: "hidden",
      titleBarOverlay: {
        color: "#2f3241",
        symbolColor: "#74b1be",
      },
    });

    // and load the index.html of the app.
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

    // Only do these things when in development
    if (isDev) {
      // Errors are thrown if the dev tools are opened
      // before the DOM is ready
      mainWindow.webContents.once("dom-ready", async () => {
        await installExtension([REDUX_DEVTOOLS, REACT_DEVELOPER_TOOLS])
          .then((name: string) => console.log(`Added Extension:  ${name}`))
          .catch((err: unknown) => console.log("An error occurred: ", err))
          .finally(() => {
            // Open the DevTools.
            mainWindow.webContents.openDevTools();
          });
      });
    }
  };

  // This method will be called when Electron has finished
  // initialization and is ready to create browser windows.
  // Some APIs can only be used after this event occurs.
  app.whenReady().then(() => {
    session.defaultSession.setDisplayMediaRequestHandler(
      (request, callback) => {
        callback({ video: request.frame });
      }
    );

    try {
      log.transports.file.getFile().clear();
      const existingMenu = Menu.getApplicationMenu();
      if (existingMenu) {
        const settingsMenuItem: Electron.MenuItemConstructorOptions = {
          label: "Settings",
          submenu: [
            { type: "separator" },
            {
              label: "Clean app config",
              click: () => {
                const store = getStore();
                store.delete(getStoreConfigField());
                app.relaunch();
                app.exit(0);
              },
            },
            {
              label: "Logout",
              click: () => {
                removeAuthData();
                app.relaunch();
                app.exit(0);
              },
            },
          ],
        };
        existingMenu.append(new MenuItem(settingsMenuItem));
        Menu.setApplicationMenu(existingMenu);
      }
    } catch (err) {
      log.error(
        APIError.normalizeError(err, "Error processing application menu.")
          .message
      );
    }

    nativeTheme.themeSource = "dark";
    ipcMain.handle("setConnectionString", setConnectionString);
    ipcMain.handle("query", query);
    ipcMain.handle("login", login);
    ipcMain.handle("openGoProBrowser", openGoProBrowser);
    ipcMain.handle("getAuthData", getSimplifiedSafeAuth);
    ipcMain.handle("removeAuthData", removeAuthData);
    ipcMain.handle("testConnectionString", testConnectionString);
    ipcMain.handle("parseConnectionString", parseConnectionString);
    ipcMain.handle("saveAppConfig", saveAppConfig);
    ipcMain.handle("getAppConfig", getAppConfig);
    ipcMain.handle("cancelQuery", cancelQuery);
    ipcMain.handle("latencyDatabase", latencyDatabase);
    ipcMain.handle("removePanelClient", removePanelClient);
    ipcMain.handle("generateCode", generateCode);
    ipcMain.handle("chat", chat);
    ipcMain.handle("quit", () => {
      app.quit();
    });

    setInterval(async () => {
      try {
        await updateAuthData();
      } catch {
        log.error("Error updating the token");
      }
    }, 3600000); // 1 hour = 3600000 milliseconds
    createWindow();
  });

  // Quit when all windows are closed, except on macOS. There, it's common
  // for applications and their menu bar to stay active until the user quits
  // explicitly with Cmd + Q.
  app.on("window-all-closed", () => {
    closeClient();

    if (process.platform !== "darwin") {
      app.quit();
    }
  });

  app.on("activate", () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
      createWindow();
    }
  });
}
